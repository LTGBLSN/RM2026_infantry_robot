//
// Created by 21481 on 2025/8/30.
//

#ifndef BUBING_RM2025_AUTO_AIM_H
#define BUBING_RM2025_AUTO_AIM_H

#include <stdbool.h>
#include "main.h"


#define OUTPOST_ARMOR 0 //前哨站
#define HERO_ARMOR 1 //英雄
#define ENGINEER_ARMOR 2 //工程
#define INFANTRY_3_ARMOR 3 //步兵3
#define INFANTRY_4_ARMOR 4 //步兵4
#define INFANTRY_5_ARMOR 5 //步兵5
#define GUARD_ARMOR 6 //哨兵
#define BASE_ARMOR 7 //基地

#define OUTPOST_ARMOR_QUANTITY 3//前哨站3个装甲板
#define INFANTRY_ARMOR_QUANTITY 4//普通车4个装甲板

struct auto_aim_calculation_gimbal_target
{
    float yaw_angle ;
    float pitch_angle ;
    float if_shoot ;
    float vx ;
    float vy ;
    float vround ;
};


struct armor_posture//装甲板位姿
{
    float x ;
    float y ;
    float z ;
    float yaw ;
};



//必须和上位机一模一样
struct ReceivePacket
{
    uint8_t header;         // 包头 0xA5
    uint8_t tracking : 1;   // 低1位是 tracking 代表当前是否锁定目标
    uint8_t id : 3;         // 接下来的3位是 id 0-outpost 6-guard 7-base
    uint8_t armors_num : 3; // 再接下来的3位是 armors_num 2-balance 3-outpost 4-normal
    float x;                // 目标 x 坐标(世界坐标系)
    float y;                // 目标 y 坐标(世界坐标系)
    float z;                // 目标 z 坐标(世界坐标系)
    float yaw;              // 目标倾斜角度(世界坐标系)
    float vx;               // x 方向速度(世界坐标系)
    float vy;               // y 方向速度(世界坐标系)
    float vz;               // z 方向速度(世界坐标系)
    float v_yaw;            // 目标旋转角速度
    float r1;               // 装甲板半径1目标其中一组装甲板相对中心的半径
    float r2;               // 装甲板半径2目标另一组装甲板相对中心的半径
    float dz;               // tracking 中的装甲板的上一块装甲板的 z 轴位置
    uint16_t checksum;      // CRC16 校验和 (小端)
} __attribute__((packed)); // 关键！防止编译器优化对齐，确保内存布局一致

struct SentPacket
{
    uint8_t header ;// 包头 0x5A
    uint8_t detect_color : 1  ; // 0: red, 1: blue要识别的颜色默认1      ？？这不对啊启动的时候识别的红色
    bool reset_tracker  : 1; //重置跟踪器，默认1
    uint8_t reserved : 6;
    float roll; // // 世界坐标系下云台当前的 roll
    float pitch; // 世界坐标系下云台当前的 pitch
    float yaw; // 世界坐标系下云台当前的 yaw
    float aim_x;//当前云台瞄准的位置用于发布可视化 Marker
    float aim_y;//当前云台瞄准的位置用于发布可视化 Marker
    float aim_z;//当前云台瞄准的位置用于发布可视化 Marker
    uint16_t checksum ;
} __attribute__((packed));


extern struct ReceivePacket auto_aim_rx_packet;

extern struct SentPacket auto_aim_tx_packet;


void auto_aim_communication_data_parse(uint8_t rx_data);

void sent_data_update();

uint16_t crc16_Get_CRC16_Check_Sum(const uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC) ;



#endif //BUBING_RM2025_AUTO_AIM_H
